test points sampled
ModuleList(
  (0): GSE3Res(
    (GBN): ModuleDict()
    (GLNR): ModuleDict()
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 1)])
      (q): GConvSE3Partial(structure=[(32, 1)])
      (attn): GMABSE3(n_heads=8, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(32, 0), (33, 1), (32, 2)])
    (project): G1x1SE3(structure=[(16, 0), (16, 1), (16, 2)])
  )
  (1): GNormTFN()
  (2): GSE3Res(
    (GBN): ModuleDict()
    (GLNR): ModuleDict()
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=8, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(48, 0), (48, 1), (48, 2)])
    (project): G1x1SE3(structure=[(16, 0), (16, 1), (16, 2)])
  )
  (3): GNormTFN()
  (4): GSE3Res(
    (GBN): ModuleDict()
    (GLNR): ModuleDict()
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=8, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(48, 0), (48, 1), (48, 2)])
    (project): G1x1SE3(structure=[(16, 0), (16, 1), (16, 2)])
  )
  (5): GNormTFN()
  (6): GSE3Res(
    (GBN): ModuleDict()
    (GLNR): ModuleDict()
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=8, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(48, 0), (48, 1), (48, 2)])
    (project): G1x1SE3(structure=[(16, 0), (16, 1), (16, 2)])
  )
  (7): GNormTFN()
  (8): GSE3Res(
    (GBN): ModuleDict()
    (GLNR): ModuleDict()
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=8, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(48, 0), (48, 1), (48, 2)])
    (project): G1x1SE3(structure=[(16, 0), (16, 1), (16, 2)])
  )
  (9): GNormTFN()
  (10): GSE3Res(
    (GBN): ModuleDict()
    (GLNR): ModuleDict()
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(64, 0)])
      (k): GConvSE3Partial(structure=[(64, 0)])
      (q): GConvSE3Partial(structure=[(64, 0)])
      (attn): GMABSE3(n_heads=8, structure=[(64, 0)])
    )
    (cat): GCat(structure=[(80, 0)])
    (project): AttentiveSelfInteractionSE3(in=[(80, 0)], out=[(64, 0)])
  )
)
Total Params: 37124449, trainable params: 37124449
Begin training
Scanobjectnn_4090_256_20_batch32_att_6_32.0
[0|0] loss: 2.70429
Traceback (most recent call last):
  File "/home/sssak/EquivPerformer/pccls_run.py", line 272, in <module>
    main(FLAGS, UNPARSED_ARGV)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 245, in main
    _, acc_epoch = train_epoch(epoch, model, task_loss, train_loader, optimizer, scheduler, FLAGS)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 85, in train_epoch
    loss.backward()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/_tensor.py", line 488, in backward
    torch.autograd.backward(
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/autograd/__init__.py", line 197, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 160.00 MiB (GPU 0; 23.64 GiB total capacity; 21.32 GiB already allocated; 139.38 MiB free; 22.09 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):
  File "/home/sssak/EquivPerformer/pccls_run.py", line 272, in <module>
    main(FLAGS, UNPARSED_ARGV)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 245, in main
    _, acc_epoch = train_epoch(epoch, model, task_loss, train_loader, optimizer, scheduler, FLAGS)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 85, in train_epoch
    loss.backward()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/_tensor.py", line 488, in backward
    torch.autograd.backward(
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/autograd/__init__.py", line 197, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 160.00 MiB (GPU 0; 23.64 GiB total capacity; 21.32 GiB already allocated; 139.38 MiB free; 22.09 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/sssak/EquivPerformer/pccls_run.py", line 276, in <module>
    pdb.post_mortem()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/pdb.py", line 1648, in post_mortem
    p.interaction(None, t)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/pdb.py", line 357, in interaction
    self._cmdloop()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/pdb.py", line 322, in _cmdloop
    self.cmdloop()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/cmd.py", line 126, in cmdloop
    line = input(self.prompt)
OSError: [Errno 9] Bad file descriptor
> /home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/autograd/__init__.py(197)backward()
-> Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
(Pdb)