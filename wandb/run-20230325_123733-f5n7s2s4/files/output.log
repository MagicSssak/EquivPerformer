test points sampled
15
ModuleList(
  (0): GSE3Res(
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 1)])
      (q): GConvSE3Partial(structure=[(32, 1)])
      (attn): GMABSE3(n_heads=16, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(32, 0), (33, 1), (32, 2)])
    (project): G1x1SE3(structure=[(32, 0), (32, 1), (32, 2)])
  )
  (1): GNormTFN()
  (2): GSE3Res(
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=16, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(64, 0), (64, 1), (64, 2)])
    (project): G1x1SE3(structure=[(32, 0), (32, 1), (32, 2)])
  )
  (3): GNormTFN()
  (4): GSE3Res(
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=16, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(64, 0), (64, 1), (64, 2)])
    (project): G1x1SE3(structure=[(32, 0), (32, 1), (32, 2)])
  )
  (5): GNormTFN()
  (6): GSE3Res(
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=16, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(64, 0), (64, 1), (64, 2)])
    (project): G1x1SE3(structure=[(32, 0), (32, 1), (32, 2)])
  )
  (7): GNormTFN()
  (8): GSE3Res(
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (k): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (q): GConvSE3Partial(structure=[(32, 0), (32, 1), (32, 2)])
      (attn): GMABSE3(n_heads=16, structure=[(32, 0), (32, 1), (32, 2)])
    )
    (cat): GCat(structure=[(64, 0), (64, 1), (64, 2)])
    (project): G1x1SE3(structure=[(32, 0), (32, 1), (32, 2)])
  )
  (9): GNormTFN()
  (10): GSE3Res(
    (GMAB): ModuleDict(
      (v): GConvSE3Partial(structure=[(64, 0)])
      (k): GConvSE3Partial(structure=[(64, 0)])
      (q): GConvSE3Partial(structure=[(64, 0)])
      (attn): GMABSE3(n_heads=16, structure=[(64, 0)])
    )
    (cat): GCat(structure=[(96, 0)])
    (project): AttentiveSelfInteractionSE3(in=[(96, 0)], out=[(64, 0)])
  )
)
Begin training
Scanobjectnn_4090_196_20_batch32_att_6_32
Saved: models/Scanobjectnn_4090_196_20_batch32_att_6_32.pt
> /home/sssak/EquivPerformer/equivariant_attention/modules.py(324)forward()
-> kernel = torch.sum(R * basis[f'{self.degree_in},{self.degree_out}'], -1)
(Pdb)
Traceback (most recent call last):
  File "/home/sssak/EquivPerformer/pccls_run.py", line 244, in <module>
    main(FLAGS, UNPARSED_ARGV)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 223, in main
    train_loss = train_epoch(epoch, model, task_loss, train_loader, optimizer, scheduler, FLAGS)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 62, in train_epoch
    pred = model(g)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/experiments/pc3d/pccls_models.py", line 99, in forward
    global_enc = layer(global_enc, G=G, r=global_r, basis=global_basis)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/equivariant_attention/modules.py", line 934, in forward
    q = self.GMAB['q'](features, G=G, **kwargs)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/equivariant_attention/modules.py", line 707, in forward
    unary = self.kernel_unary[etype](feat, basis)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/equivariant_attention/modules.py", line 324, in forward
    kernel = torch.sum(R * basis[f'{self.degree_in},{self.degree_out}'], -1)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.99 GiB (GPU 0; 23.68 GiB total capacity; 18.48 GiB already allocated; 119.69 MiB free; 22.18 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):
  File "/home/sssak/EquivPerformer/pccls_run.py", line 244, in <module>
    main(FLAGS, UNPARSED_ARGV)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 223, in main
    train_loss = train_epoch(epoch, model, task_loss, train_loader, optimizer, scheduler, FLAGS)
  File "/home/sssak/EquivPerformer/pccls_run.py", line 62, in train_epoch
    pred = model(g)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/experiments/pc3d/pccls_models.py", line 99, in forward
    global_enc = layer(global_enc, G=G, r=global_r, basis=global_basis)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/equivariant_attention/modules.py", line 934, in forward
    q = self.GMAB['q'](features, G=G, **kwargs)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/equivariant_attention/modules.py", line 707, in forward
    unary = self.kernel_unary[etype](feat, basis)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/sssak/EquivPerformer/equivariant_attention/modules.py", line 324, in forward
    kernel = torch.sum(R * basis[f'{self.degree_in},{self.degree_out}'], -1)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.99 GiB (GPU 0; 23.68 GiB total capacity; 18.48 GiB already allocated; 119.69 MiB free; 22.18 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "/home/sssak/EquivPerformer/pccls_run.py", line 248, in <module>
    pdb.post_mortem()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/pdb.py", line 1648, in post_mortem
    p.interaction(None, t)
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/pdb.py", line 357, in interaction
    self._cmdloop()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/pdb.py", line 322, in _cmdloop
    self.cmdloop()
  File "/home/sssak/anaconda3/envs/cuda/lib/python3.10/cmd.py", line 126, in cmdloop
    line = input(self.prompt)
OSError: [Errno 9] Bad file descriptor